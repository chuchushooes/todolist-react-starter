{"version":3,"sources":["assets/images/ac-logo.svg","api/auth.js","context/AuthContext.jsx","pages/HomePage.jsx","components/common/auth.styled.js","assets/images/check-active.svg","assets/images/check-circle.svg","assets/images/check-hover.svg","components/AuthInput.jsx","components/Header.jsx","components/TodoInput.jsx","components/TodoItem.jsx","components/TodoCollection.jsx","api/todos.js","pages/TodoPage.jsx","components/Footer.jsx","pages/LoginPage.jsx","pages/SignUpPage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["_path","_path2","_path3","_path4","authURL","login","username","password","axios","post","data","console","log","authToken","success","error","register","email","checkPermission","get","headers","Authorization","response","defaultAuthContext","isAuthenticated","currentMember","logout","AuthContext","createContext","useAuth","useContext","AuthProvider","children","useState","setIsAuthenticated","payload","setPayload","pathname","useLocation","useEffect","checkTokenIsValid","localStorage","getItem","tempPayload","jwt","Provider","value","id","sub","name","setItem","removeItem","HomePage","navigate","useNavigate","StyedContainer","styled","div","StyledAuthInputContainer","StyledButton","button","StyledLinkText","_excluded","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgAcLogo","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","fillRule","clipRule","d","ForwardRef","StyledContainer","StyledLabel","label","StyledInput","input","AuthInput","type","placeholder","onChange","e","StyledHeader","header","StyledGreetingText","Header","StyledAddTodoContainer","StyledLabelIcon","StyledInputContainer","StyledAddTodoActionContainer","TodoInput","inputValue","onKeyDown","onAddTodo","className","clsx","active","htmlFor","onClick","StyledTaskItem","CheckActiveIcon","CheckCircleIcon","CheckHoverIcon","TodoItem","todo","onToggleDone","onSave","onDelete","onChangeMode","inputRef","useRef","done","isDone","edit","isEdit","onDoubleClick","defaultValue","current","TodoCollection","todos","map","baseUrl","axiosInstance","create","baseURL","interceptors","request","use","config","token","getTodos","res","createTodo","patchTodo","patch","JSON","stringify","deleteTodo","delete","TodoPage","setTodos","setInputValue","handleAddTodo","prevTodos","handleKeyDown","handleToggleDone","currentTodo","find","handleSave","handleDeleteTodo","filter","getTodosAsync","TodosContext","StyledFooter","footer","Footer","count","LoginPage","setUserName","setPassword","handleClick","Swal","fire","icon","showConfirmButton","position","timer","nameInputValue","passwordInputValue","to","SignUpPage","setEmail","emailInputValue","App","basename","process","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.199c22e5.chunk.js","sourcesContent":["var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgAcLogo(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 40,\n    height: 40,\n    viewBox: \"0 0 40 40\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M25.6996 18.4709C25.6996 18.4709 18.2328 30.5781 12.1109 30.5781C1.40314 30.5781 11.3821 7.51318 19.1916 7.51318C24.641 7.51318 25.6996 18.4709 25.6996 18.4709Z\",\n    fill: \"#FF6600\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M34.5723 33.6972C32.4451 35.9607 29.8198 37.6976 26.9044 38.7701C23.989 39.8426 20.8639 40.2213 17.7767 39.8761C14.6895 39.5309 11.7252 38.4713 9.11881 36.7813C6.51245 35.0914 4.33573 32.8175 2.76123 30.1401C4.5314 32.5477 7.53375 34.1527 11.803 34.1527C22.3199 34.1527 28.2899 25.98 28.2899 25.98C28.2899 25.98 28.8062 32.4392 34.5593 33.6972H34.5723Z\",\n    fill: \"#FF6600\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M37.7223 10.7451C39.2963 13.7527 40.0781 17.1116 39.9939 20.505C39.9096 23.8984 38.9621 27.2144 37.2407 30.1401C35.8792 29.3764 34.8725 28.1082 34.4379 26.609L32.1558 19.7724L37.7223 10.7451Z\",\n    fill: \"#FF6600\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M20.0031 0.0173688C25.0185 0.0140335 29.8513 1.89881 33.5398 5.29665L29.7521 11.4088C28.3811 7.84302 25.5957 4.2729 20.1767 4.2729C9.07841 4.2729 0.852307 16.3888 0.852307 23.9846C0.849861 24.9669 0.975283 25.9454 1.22543 26.8953C0.115582 23.8725 -0.247948 20.6265 0.165719 17.4331C0.579385 14.2398 1.75802 11.1934 3.60147 8.55306C5.44491 5.91269 7.89866 3.75634 10.7542 2.26726C13.6097 0.778179 16.7826 0.000388507 20.0031 0V0.0173688Z\",\n    fill: \"#FF6600\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAcLogo);\nexport default __webpack_public_path__ + \"static/media/ac-logo.f4e0f3cb.svg\";\nexport { ForwardRef as ReactComponent };","import axios from 'axios';\r\nconst authURL = 'https://todo-list.alphacamp.io/api/auth';\r\n\r\nexport const login = async ({ username, password }) => {\r\n  try {\r\n    // 這裡是把 response 內的 data 物件直接解構\r\n    // axios 回傳為一個物件 data，其內有 authToken 和 user\r\n    const { data } = await axios.post(`${authURL}/login`, {\r\n      username,\r\n      password,\r\n    });\r\n\r\n    console.log(data); // 這裡執行時可以先印出data資訊看出是否能拿到資料\r\n\r\n    // 這裡又把 data 內的物件解構，取出authToken值\r\n    const { authToken } = data;\r\n\r\n    // 加入條件式，如果有成功取出就回傳 success flag 新增在 data 內\r\n    // (在data資訊內新增 success內的key value)\r\n    // 成功 return 到這條就結束了後面 return 不會使用\r\n    if (authToken) {\r\n      return { success: true, ...data };\r\n    }\r\n\r\n    //失敗的話還是要回傳data回去\r\n    return data;\r\n  } catch (err) {\r\n    console.error('[Login Failed]:', err);\r\n  }\r\n};\r\n\r\nexport const register = async ({ username, email, password }) => {\r\n  try {\r\n    const { data } = await axios.post(`${authURL}/register`, {\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n\r\n    const { authToken } = data;\r\n\r\n    if (authToken) {\r\n      return { success: true, ...data };\r\n    }\r\n\r\n    return data;\r\n  } catch (err) {\r\n    console.error('[Register Failed]:', err);\r\n  }\r\n};\r\n\r\n// 後端驗證 token 是否正確\r\nexport const checkPermission = async (authToken) => {\r\n  try {\r\n    const response = await axios.get(`${authURL}/test-token`, {\r\n      //HTML規格模式記得這裡 Bearer後面要多留空白\r\n      headers: {\r\n        Authorization: 'Bearer ' + authToken,\r\n      },\r\n    });\r\n    //後端會回傳成功與否，所以我們要回傳 success 屬性出去\r\n    return response.data.success;\r\n  } catch (err) {\r\n    console.error('[Check Permission Failed]:', err);\r\n  }\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { createContext } from 'react';\r\nimport { register, login, checkPermission } from '../api/auth';\r\nimport * as jwt from 'jsonwebtoken'; // 這裡導入全部並命名為 jwt 做使用\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\n\r\n// 初始化定義 defaultAuth 資訊\r\nconst defaultAuthContext = {\r\n  isAuthenticated: false, // 使用者是否登錄的依據\r\n  currentMember: null, // 使用者相關資料 預設為null\r\n  register: null, //註冊的方法\r\n  login: null, //登入的方法\r\n  logout: null, //登出的方法，以上這三個在context內會定義\r\n};\r\n\r\n// 建立 createContext 命名為 AuthContext 讓 Page們去使用\r\n// 帶入預設的context值 default\r\nconst AuthContext = createContext(defaultAuthContext);\r\n\r\n//建立 useAuth 這個 Hooks，當 Pages 都執行 useAuth 時，都能引用 Context 內容\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n//建立 provider 來管理 context 內的狀態操作\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false); //預設是否認證\r\n  const [payload, setPayload] = useState(null); // 預設使用者資料為null\r\n\r\n  const { pathname } = useLocation(); //將當前頁面的路徑值取出(這是useLocation既有的屬性)\r\n\r\n  //原本用nav判斷是否變動，現在改由 pathname 判斷\r\n  useEffect(() => {\r\n    const checkTokenIsValid = async () => {\r\n      const authToken = localStorage.getItem('authToken');\r\n\r\n      if (!authToken) {\r\n        // 如果沒有authToken後續就不用作check的動作\r\n        setPayload(null);\r\n        setIsAuthenticated(false);\r\n        return;\r\n      }\r\n\r\n      // 如果有 token 就拿去做驗證看是否有效\r\n      const result = await checkPermission(authToken);\r\n      if (result) {\r\n        // 如果驗證成功去更改state，token用jwt解析出payload，放入setPayload\r\n        setIsAuthenticated(true);\r\n        const tempPayload = jwt.decode(authToken);\r\n        setPayload(tempPayload);\r\n      } else {\r\n        setPayload(null);\r\n        setIsAuthenticated(false);\r\n      }\r\n    };\r\n    checkTokenIsValid(); //執行上面寫好的fn\r\n  }, [pathname]); // deps由nav改成pathname\r\n\r\n  //這裡Provider的value會定義defaultAuthContext內的值是什麼\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        currentMember: payload && { id: payload.sub, name: payload.name }, //payload條件式，如果有值就讓再命名 id 和 name (這裡的 payload 為驗證過後的 payload)\r\n        register: async (data) => {\r\n          //註冊需要的內容命名他是 data\r\n          //需要注意，在 AuthContext 不會直接知道使用者在註冊表單的輸入值，所以需要補上一個 data 當成調用函式時的參數\r\n          const { success, authToken } = await register({\r\n            username: data.username,\r\n            email: data.email,\r\n            password: data.password,\r\n          });\r\n          const tempPayload = jwt.decode(authToken); // 使用套件解析authToken值，但不能保證 token 是否有效 (但這裡是註冊表示如果填單寫正確應該沒有token認證問題)\r\n\r\n          // 判斷 tempPayload 是否有被解析成功\r\n          if (tempPayload) {\r\n            setPayload(tempPayload);\r\n            setIsAuthenticated(true);\r\n            localStorage.setItem('authToken', authToken); //解析成功把 token 放入 localStorage 內\r\n          } else {\r\n            setPayload(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n          return success; // 最後回傳 success 給 SingupPage 觸發 alert 視窗\r\n        },\r\n        // login 原理同 register\r\n        login: async (data) => {\r\n          // 調用 login() 並傳入表單資料，解構取出success/authToken(在auth 的 login api 有 return 的二個值)\r\n          const { success, authToken } = await login({\r\n            username: data.username,\r\n            password: data.password,\r\n          });\r\n          const tempPayload = jwt.decode(authToken);\r\n          if (tempPayload) {\r\n            setPayload(tempPayload);\r\n            setIsAuthenticated(true);\r\n            localStorage.setItem('authToken', authToken);\r\n          } else {\r\n            setPayload(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n          return success;\r\n        },\r\n        // 登出不需要api ，把localStorage內的token移除就好，記得useState狀態要改變\r\n        logout: () => {\r\n          localStorage.removeItem('authToken');\r\n          setPayload(null);\r\n          setIsAuthenticated(false);\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\n\n// 首頁頁要做身分認證判斷\nconst HomePage = () => {\n  const isAuthenticated = useAuth(); //引入 useAuth context\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/todo');\n    } else {\n      navigate('/login');\n    }\n  }, [navigate, isAuthenticated]);\n};\n\nexport default HomePage;\n","import styled from 'styled-components';\n\nconst StyedContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 50px;\n`;\n\nconst StyledAuthInputContainer = styled.div`\n  width: 50%;\n  margin-top: 30px;\n`;\n\nconst StyledButton = styled.button`\n  border-radius: 30px;\n  background-color: #ff6600;\n  border: none;\n\n  color: white;\n  min-width: 300px;\n  font-family: 'Noto Sans TC', sans-serif;\n  font-weight: bold;\n  padding: 6px 0;\n  margin: 2rem 0;\n\n  &.hover {\n    cursor: pointer;\n  }\n`;\n\nconst StyledLinkText = styled.div`\n  color: #0062ff;\n  font-size: 16px;\n  font-weight: 400;\n`;\n\nexport {\n  StyedContainer as AuthContainer,\n  StyledAuthInputContainer as AuthInputContainer,\n  StyledButton as AuthButton,\n  StyledLinkText as AuthLinkText,\n};\n","export default __webpack_public_path__ + \"static/media/check-active.95ca055c.svg\";","export default __webpack_public_path__ + \"static/media/check-circle.30720b46.svg\";","export default __webpack_public_path__ + \"static/media/check-hover.5e00062b.svg\";","import styled from 'styled-components';\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  background-color: #f5f8fa;\n  width: 100%;\n  height: 54px;\n  border-bottom: 2px solid black;\n`;\nconst StyledLabel = styled.label`\n  font-size: 14;\n  color: '#696974';\n  text-align: start;\n`;\n\nconst StyledInput = styled.input`\n  outline: none;\n  border: none;\n  background-color: #f5f8fa;\n  border-radius: 0px;\n`;\n\nconst AuthInput = ({ type, label, value, placeholder, onChange }) => {\n  return (\n    <StyledContainer>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        type={type || 'text'}\n        placeholder={placeholder || ''}\n        value={value || ''}\n        onChange={(e) => onChange?.(e.target.value)}\n      />\n    </StyledContainer>\n  );\n};\n\nexport default AuthInput;\n","import styled from 'styled-components';\n\nconst StyledHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  color: var(--major);\n  padding: 0 16px;\n\n  h3 {\n    font-weight: 400;\n    user-select: none;\n  }\n`;\n\nconst StyledGreetingText = styled.div`\n  color: var(--gray);\n  span {\n    color: var(--major);\n  }\n`;\n\n// 接收使用者名稱 username，在TodoPage新增 prop 為currentMember\nconst Header = ({ username }) => {\n  return (\n    <StyledHeader>\n      <h3>Tasks</h3>\n      <StyledGreetingText>\n        Hi <span>{username}</span>\n      </StyledGreetingText>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import clsx from 'clsx';\nimport styled from 'styled-components';\n\nconst StyledAddTodoContainer = styled.div`\n  min-height: 52px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  word-wrap: break-word;\n  word-break: break-word;\n  padding: 0 12px;\n  box-shadow: 0 17px 0 -16px #e5e5e5;\n  flex-wrap: wrap;\n\n  &.active {\n    box-shadow: 0 17px 0 -16px var(--major);\n  }\n`;\n\nconst StyledLabelIcon = styled.label`\n  display: inline-flex;\n  font-size: 30px;\n  transition: color 0.2s ease-out;\n  font-weight: 300;\n\n  &:after {\n    content: '+';\n  }\n`;\n\nconst StyledInputContainer = styled.div`\n  min-height: 52px;\n  display: flex;\n  align-items: center;\n  flex: 1;\n  user-select: none;\n\n  input {\n    flex: 1;\n    padding: 8px 12px;\n    border: 0;\n    outline: 0;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--major);\n      font-size: 13px;\n    }\n  }\n  $.active {\n    input::placeholder {\n      color: var(--gray);\n    }\n  }\n`;\n\nconst StyledAddTodoActionContainer = styled.div`\n  button {\n    font-size: 13px;\n    color: var(--major);\n    padding-right: 5px;\n    display: none;\n  }\n\n  &.active {\n    button {\n      display: block;\n    }\n  }\n`;\n\n// 這是輸入欄位\n// inputValue 使用者當前輸入的值，onChange監聽輸入框表單，onKeyDown監聽使用者按下Enter，onAddTodo監聽使用者點及新增按鈕\nconst TodoInput = ({ inputValue, onChange, onKeyDown, onAddTodo }) => {\n  const handleOnchange = (e) => {\n    console.log(onChange);\n    onChange?.(e.target.value);\n    /*\n    '?'為語法糖，等同如下，如果有 onChange 才繼續，避免 undefined 產生 error\n    if (onChange) {\n      onChange(e.target.value); \n    }\n    */\n  };\n\n  const handleOnclick = () => {\n    onAddTodo?.(inputValue);\n  };\n\n  return (\n    <StyledAddTodoContainer\n      className={clsx('', { active: inputValue.length > 0 })}\n    >\n      <StyledLabelIcon className=\"icon\" htmlFor=\"add-todo-input\" />\n      <StyledInputContainer>\n        <input\n          id=\"add-todo-input\"\n          type=\"text\"\n          placeholder=\"新增工作\"\n          value={inputValue}\n          onChange={handleOnchange}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              onKeyDown?.(inputValue);\n            }\n          }}\n          /*onKeyDown是一個事件監聽，他會監聽鍵盤發出的name值，\n          我們的目標是當使用者按下enter發送，所以要讓e.key = 'Enter' 才可執行\n          接著就和 handleOnclick 一樣 onKeyDown prop 回傳 inputValue\n          */\n        />\n      </StyledInputContainer>\n      <StyledAddTodoActionContainer\n        className={clsx('', { active: inputValue.length > 0 })}\n      >\n        <button className=\"btn-reset\" onClick={handleOnclick}>\n          新增\n        </button>\n      </StyledAddTodoActionContainer>\n    </StyledAddTodoContainer>\n  );\n};\n\nexport default TodoInput;\n","import styled from 'styled-components';\nimport { useRef } from 'react';\nimport {\n  CheckActiveIcon,\n  CheckCircleIcon,\n  CheckHoverIcon,\n} from 'assets/images';\nimport clsx from 'clsx';\n\nconst StyledTaskItem = styled.div`\n  min-height: 52px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  word-wrap: break-word;\n  word-break: break-word;\n  padding: 0 12px;\n  box-shadow: 0 17px 0 -16px #e5e5e5;\n  flex-wrap: wrap;\n\n  .task-item-body-input {\n    user-select: none;\n    display: none;\n    flex: 1;\n    padding: 8px 0px;\n    border: 0;\n    outline: 0;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--gray);\n      font-size: 13px;\n    }\n  }\n\n  &:hover {\n    background: #fff3eb;\n    box-shadow: inset 0 0 0 1px #fff3eb;\n\n    .task-item-action .btn-destroy {\n      display: inline-flex;\n    }\n  }\n\n  &.done {\n    .task-item-body {\n      color: var(--gray);\n      text-decoration: line-through;\n    }\n\n    .icon-checked {\n      background-image: url(${CheckActiveIcon});\n    }\n  }\n\n  &.edit {\n    .task-item-body-input {\n      display: block;\n    }\n    .task-item-body-text {\n      display: none;\n    }\n    .task-item-action {\n      display: none;\n    }\n  }\n\n  .task-item-checked {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .task-item-body {\n    font-weight: 400;\n    padding: 8px 12px;\n    flex: 1;\n    display: flex;\n  }\n\n  .task-item-action {\n    .btn-destroy {\n      display: none;\n      font-size: 30px;\n      transition: color 0.2s ease-out;\n      font-weight: 300;\n      &:after {\n        content: '×';\n      }\n    }\n  }\n\n  .icon-checked {\n    background-image: url(${CheckCircleIcon});\n    background-position: center;\n    background-repeat: no-repeat;\n\n    &:hover {\n      transition: background-image 0.5s;\n      background-image: url(${CheckHoverIcon});\n    }\n  }\n`;\n\n// 這是每一個 TodoItem\n// 根據條件切換 ClassName - clsx，來判斷是否為ture，如果是done是true，就顯示done，style就會接收done的class顯示\nconst TodoItem = ({ todo, onToggleDone, onSave, onDelete, onChangeMode }) => {\n  const inputRef = useRef(null);\n  const handleKeyDown = (e) => {\n    // 字串長度大於零按下Enter才能被儲存更新\n    if (inputRef.current.value.length > 0 && e.key === 'Enter') {\n      onSave?.({ id: todo.id, title: inputRef.current.value });\n      console.log(inputRef.current.value); //測試印出來看\n      //title是輸入的當下值會被儲存\n    }\n    if (e.key === 'Escape') {\n      onChangeMode?.({ id: todo.id, isEdit: false });\n    }\n  };\n  return (\n    <StyledTaskItem\n      className={clsx('', { done: todo.isDone }, { edit: todo.isEdit })}\n    >\n      <div className=\"task-item-checked\">\n        <span\n          className=\"icon icon-checked\"\n          onClick={() => {\n            onToggleDone?.(todo.id);\n          }}\n        />\n      </div>\n      <div\n        className=\"task-item-body\"\n        onDoubleClick={() => {\n          onChangeMode?.({ id: todo.id, isEdit: true }); //點擊後回傳 key value物件值(有二個物件值以上的時候)\n        }}\n      >\n        <span className=\"task-item-body-text\">{todo.title}</span>\n        <input\n          ref={inputRef}\n          className=\"task-item-body-input\"\n          defaultValue={todo.title}\n          onKeyDown={handleKeyDown}\n        />{' '}\n        {/*編輯輸入框加上初始值 value={todo.title}，會被鎖住，所以用defaultValue(一開始渲染時的初始值)*/}\n      </div>\n      <div className=\"task-item-action \">\n        <button className=\"btn-reset btn-destroy icon\" onClick={() => { onDelete?.(todo.id)}}></button>\n      </div>\n    </StyledTaskItem>\n  );\n};\n\nexport default TodoItem;\n","import TodoItem from './TodoItem';\n\n// 這是整個Todo集合，其下有一串TodoItem\n// todos 帶入整個陣列 map TodoItem 用\nconst TodoCollection = ({\n  todos,\n  onToggleDone,\n  onSave,\n  onDelete,\n  onChangeMode,\n}) => {\n  return (\n    <div>\n      TodoCollection\n      {todos.map((todo) => {\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onToggleDone={(id) => {\n              onToggleDone?.(id);\n            }} //將TodoItem的 id 再傳上去\n            onChangeMode={({ id, isEdit }) => {\n              onChangeMode?.({ id, isEdit });\n            }} // 將TodoItem的 id,isEdit 再傳上去\n            onSave={({ id, title }) => {\n              onSave?.({ id, title });\n            }} // 將TodoItem的 id,title 再傳上去\n            onDelete={(id) => {\n              onDelete?.(id);\n            }} //將TodoItem的 id 再傳上去\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TodoCollection;\n","import axios from 'axios';\r\nconst baseUrl = 'https://todo-list.alphacamp.io/api';\r\n// json server 的 endpoint 被改掉 http://localhost:3001 (json server是可以讓你在本地端執行db)\r\n// 改成 todolist 的 endpoint\r\n\r\n// 將底下的CRUD功能從本地端的axios改成外部API的axios\r\n// 這裡是創建一個 實例 (Instance)，自定義配置\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseUrl,\r\n});\r\n\r\n// 我們將這個自定義的 axios 加上功能，讓 CRUD去使用\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    //這裡改成 arrow fn\r\n    const token = localStorage.getItem('authToken'); //從localStorage拿到token\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`; //取出config 加上 token\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with request error\r\n    console.error('error');\r\n  },\r\n);\r\n\r\n// 之後這裡的方法都會應用到TodoPage裡\r\n// 預計會使用到的CRUD\r\n// 專案統一使用 async/await 方法，所以都要使用 async function\r\n// 接收到資料後才能繼續動作(放在await之後)\r\n// 接收後端報錯訊息 catch error\r\nexport const getTodos = async () => {\r\n  try {\r\n    const res = await axiosInstance.get(`${baseUrl}/todos`);\r\n    return res.data.data; //接收到的資料會是存放在data的data裡\r\n  } catch (err) {\r\n    console.error('[get todos failed]:', err);\r\n  }\r\n};\r\n\r\n// 變數 payload 通常用來表示「打包後的資訊」，在這裡打包了想要新增的 todo 內容\r\nexport const createTodo = async (payload) => {\r\n  const { title, isDone } = payload;\r\n  try {\r\n    const res = await axiosInstance.post(`${baseUrl}/todos`, { title, isDone }); // 把資料加入到裡面\r\n    // console.log('[createTodo data]', res);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.error('[Create todos failed]:', err);\r\n  }\r\n};\r\n\r\nexport const patchTodo = async (payload) => {\r\n  const { title, isDone, id } = payload;\r\n  try {\r\n    // try catch 是怕接收會有問題才使用的報錯方式\r\n    // patch修改 router 後要放 id\r\n    const res = await axiosInstance.patch(`${baseUrl}/todos/${id}`, {\r\n      title,\r\n      isDone,\r\n    }); // 把資料更新到裡面\r\n    console.log(JSON.stringify({ res })); // 這裡可以查看回傳去TodoPage的資料是什麼\r\n\r\n    return res.data;\r\n  } catch (err) {\r\n    console.error('[Patch todos failed]:', err);\r\n  }\r\n};\r\n\r\n// delete 從 postman 可以看出需要的只有id，接收到 id 資訊就可刪除資料了\r\nexport const deleteTodo = async (id) => {\r\n  try {\r\n    const res = await axiosInstance.delete(`${baseUrl}/todos/${id}`);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.error('[Delete todos failed]:', err);\r\n  }\r\n};\r\n","import { useState, useEffect } from 'react';\nimport { createContext } from 'react';\nimport { Footer, Header, TodoCollection, TodoInput } from 'components';\nimport { getTodos, createTodo, patchTodo, deleteTodo } from '../api/todos'; //串接建立好的 api\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\n\n// dummyTodos因為串了後端的db後就可刪除\n\n// 這是TodoPage，Todo的入口，這裡傳一個假資料給TodoCollection\nconst TodoPage = () => {\n  const [todos, setTodos] = useState([]); //預設是空陣列我們抓後端db的資料從API上\n  const [inputValue, setInputValue] = useState('');\n\n  const navigate = useNavigate();\n\n  //這裡不用取出方法，只要取出是否認證\n  // 因為我們要確認人員所以帶入 currentMember\n  const { isAuthenticated, currentMember } = useAuth();\n\n  const handleChange = (value) => {\n    console.log('input', value);\n    setInputValue(value);\n  };\n\n  // function要改成 async/await 模式\n  const handleAddTodo = async () => {\n    // 簡單的錯誤判斷，當input內沒有值就return不讓他更新\n    if (inputValue.length === 0) {\n      return;\n    }\n\n    try {\n      //使用 createTodo 取得後端資料\n      // 這裡初始值就只有 title 和 isDone，id 由資料庫自行產生\n      const data = await createTodo({\n        title: inputValue,\n        isDone: false,\n      });\n      // 這裡要使用function的方式嗎? 先去拿之前資料再進行修改\n      setTodos((prevTodos) => {\n        return [\n          ...prevTodos,\n          {\n            title: data.title,\n            isDone: data.isDone,\n            id: data.id,\n            isEdit: false,\n          },\n        ];\n      });\n      setInputValue(''); //todo加入後清空input內value值\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // 和 handleTodo 原理一樣直接複製貼上\n  const handleKeyDown = async () => {\n    if (inputValue.length === 0) {\n      return;\n    }\n    try {\n      const data = await createTodo({\n        title: inputValue,\n        isDone: false,\n      });\n\n      setTodos((prevTodos) => {\n        return [\n          ...prevTodos,\n          {\n            title: data.title,\n            isDone: data.isDone,\n            id: data.id,\n            isEdit: false,\n          },\n        ];\n      });\n      setInputValue('');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //更改切換完成/未完成，isDone的true或false修改\n  const handleToggleDone = async (id) => {\n    // 先用 find 找正確 id 的值，再去用 patch 更新\n    const currentTodo = todos.find((todo) => todo.id === id);\n    try {\n      await patchTodo({\n        //這裡是去更新db，對應id、修改isDone\n        id,\n        isDone: !currentTodo.isDone,\n      });\n\n      setTodos((prevTodos) => {\n        // 這裡是去更新畫面，所以讓這二者同步處理維持畫面完整\n        return prevTodos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              isDone: !todo.isDone,\n            };\n          }\n          return todo;\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  //點擊二下後可編輯title , 當 Escape 時離開編輯模式(當下編輯無須上傳db因為尚未按enter)\n  const handleChangeMode = ({ id, isEdit }) => {\n    setTodos((prevTodos) => {\n      return prevTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            isEdit,\n          };\n        }\n        return {\n          ...todo,\n          isEdit: false,\n        };\n      });\n    });\n  };\n\n  // 按下 Enter 儲存編輯，需上傳 db，這裡回傳資料是 id(對應路由) 和 title(修改title)\n  const handleSave = async ({ id, title }) => {\n    try {\n      await patchTodo({\n        id,\n        title,\n      });\n\n      setTodos((prevTodos) => {\n        return prevTodos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title: title,\n              isEdit: false,\n            };\n          }\n          return todo;\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // 點擊 X 後刪除該 todo\n  // 不能使用splice會修改到原陣列，用filter新增全新的陣列，篩選掉不要的內容\n  const handleDeleteTodo = async (id) => {\n    try {\n      await deleteTodo(id); // 給 detleTodo api 參數讓他去刪除 db\n      setTodos((prevTodos) => {\n        return prevTodos.filter((todo) => todo.id !== id);\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    const getTodosAsync = async () => {\n      try {\n        const todos = await getTodos(); // 這裡使用getTodos就可以從後端拿取資料\n        setTodos(todos.map((todo) => ({ ...todo, isEdit: false })));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getTodosAsync();\n  }, []); //這裡deps空白是因為只有一開始需要拿資料之後不再使用\n\n  // 把身分認證的 effect 搬到 AuthContext 內\n  // 這裡再使用 effect 判斷是否登錄，未登入就導向login\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate('/login');\n    }\n  }, [navigate, isAuthenticated]);\n\n  return (\n    <div>\n      TodoPage\n      <Header username={currentMember?.name} />\n      <TodoInput\n        inputValue={inputValue}\n        onChange={handleChange}\n        onAddTodo={handleAddTodo}\n        onKeyDown={handleKeyDown}\n      />\n      <TodoCollection\n        todos={todos}\n        onToggleDone={handleToggleDone}\n        onChangeMode={handleChangeMode}\n        onSave={handleSave}\n        onDelete={handleDeleteTodo}\n      />\n      <TodosContext.Provider value={todos.length}>\n        {' '}\n        {/* 提供目前item數目給Footer */}\n        <Footer />\n      </TodosContext.Provider>\n    </div>\n  );\n};\n\nexport default TodoPage;\nexport const TodosContext = createContext(0); //初始值為todos長度,為空陣列0\n","import styled from 'styled-components';\nimport { useContext } from 'react';\nimport { TodosContext } from '../pages/TodoPage';\n\nimport { useAuth } from '../context/AuthContext';\n\nconst StyledFooter = styled.footer`\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  p {\n    font-size: 14px;\n    font-weight: 300;\n    margin: 2rem 0 1rem;\n  }\n`;\n\nconst StyledButton = styled.button`\n  padding: 0;\n  border: 0;\n  background: none;\n  vertical-align: baseline;\n  appearance: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  cursor: pointer;\n  outline: 0;\n\n  font-size: 14px;\n  font-weight: 300;\n  margin: 2rem 0 1rem;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Footer = () => {\n  const count = useContext(TodosContext);\n  // React Hooks 點擊後 localStorage 刪除 authToken 後返回登錄頁\n\n  const { logout } = useAuth();\n  const handleClick = () => {\n    // 移除 localStorage 到 AuthContex logout function內\n    // nav 移除直接呼叫 logout function\n    logout();\n    // 這裡不用 nav 的原因是因為當呼叫login時，isAuthenticated 已經變成 false，State狀態在 TodoPage 改變，useEffect 就會執行自動跳轉到 loginPage\n  };\n  return (\n    <StyledFooter>\n      <p>剩餘項目數：{count}</p>\n      <StyledButton onClick={handleClick}>登出</StyledButton>\n    </StyledFooter>\n  );\n};\n\nexport default Footer;\n","import {\n  AuthContainer,\n  AuthInputContainer,\n  AuthButton,\n  AuthLinkText,\n} from 'components/common/auth.styled';\nimport { ACLogoIcon } from 'assets/images';\nimport { AuthInput } from 'components';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { useAuth } from '../context/AuthContext';\n\nconst LoginPage = () => {\n  const [username, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const navigate = useNavigate();\n\n  // 取得 login的方法和是否登入有效\n  const { login, isAuthenticated } = useAuth();\n\n  const handleClick = async () => {\n    //先驗證使用者輸入是否有值\n    if (username.length === 0) {\n      return;\n    }\n    if (password.length === 0) {\n      return;\n    }\n    // 將 login api 移到 AuthContext\n    // 這裡也使用 login 回傳 success 值\n    const success = await login({\n      username: username,\n      password: password,\n    });\n\n    // 如果登錄成功了話，習慣上我們會把 token 存在 localStorage 內，就可以在 react 的每個頁面取用到\n    // 取用到的話就可以去確認他是以認證的狀態\n    if (success) {\n      // 把 localStorage 搬到 AuthContext 內\n      // 引用的套件，顯示成功並 return\n      Swal.fire({\n        title: '登錄成功',\n        icon: 'success',\n        showConfirmButton: false,\n        position: 'top',\n        timer: 1000,\n      });\n      // nav 刪除這裡不須跳轉，由別處判斷\n      return;\n    }\n    //登錄失敗的跳出欄位\n    Swal.fire({\n      title: '登錄失敗',\n      icon: 'error',\n      showConfirmButton: false,\n      position: 'top',\n      timer: 1000,\n    });\n  };\n\n  useEffect(() => {\n    //如果已經認證就導向todo\n    if (isAuthenticated) {\n      navigate('/todo');\n    }\n  }, [navigate, isAuthenticated]); //這裡不需要做checkPermission 改成用 isAuthenticated 判斷\n\n  return (\n    <AuthContainer>\n      <div>\n        <ACLogoIcon />\n      </div>\n      <h1>登入 Todo</h1>\n\n      <AuthInputContainer>\n        <AuthInput\n          label=\"帳號\"\n          placeholder=\"請輸入帳號\"\n          value={username}\n          onChange={(nameInputValue) => setUserName(nameInputValue)}\n        />\n      </AuthInputContainer>\n\n      <AuthInputContainer>\n        <AuthInput\n          type=\"password\"\n          label=\"密碼\"\n          placeholder=\"請輸入密碼\"\n          value={password}\n          onChange={(passwordInputValue) => setPassword(passwordInputValue)}\n        />\n      </AuthInputContainer>\n      <AuthButton onClick={handleClick}>登入</AuthButton>\n      <Link to=\"/signup\">\n        <AuthLinkText>註冊</AuthLinkText>\n      </Link>\n    </AuthContainer>\n  );\n};\n\nexport default LoginPage;\n","import {\n  AuthContainer,\n  AuthInputContainer,\n  AuthButton,\n  AuthLinkText,\n} from 'components/common/auth.styled';\nimport { ACLogoIcon } from 'assets/images';\nimport { AuthInput } from 'components';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { useAuth } from '../context/AuthContext';\n\nconst SignUpPage = () => {\n  const [username, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const navigate = useNavigate();\n  // 取得 register 的方法和是否登入有效\n  const { register, isAuthenticated } = useAuth();\n\n  const handleClick = async () => {\n    //先驗證使用者輸入是否有值\n    if (username.length === 0) {\n      return;\n    }\n    if (email.length === 0) {\n      return;\n    }\n    if (password.length === 0) {\n      return;\n    }\n\n    // 把 register api 功能搬到 AuthContext 內\n    // 這裡也使用 register 回傳 success 值\n    const success = await register({\n      username: username,\n      email: email,\n      password: password,\n    });\n\n    if (success) {\n      // 把 localStorage 搬到 AuthContext 內\n      // 引用的套件，顯示成功並 return\n      Swal.fire({\n        title: '註冊成功',\n        icon: 'success',\n        showConfirmButton: false,\n        position: 'top',\n        timer: 1000,\n      });\n      // nav移到別處判斷\n      return;\n    }\n    Swal.fire({\n      title: '註冊失敗',\n      icon: 'error',\n      showConfirmButton: false,\n      position: 'top',\n      timer: 1000,\n    });\n  };\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // 如果結果成功就導向 todos 頁面\n      navigate('/todo');\n    }\n  }, [navigate, isAuthenticated]); //這裡不需要做checkPermission 改成用 isAuthenticated 判斷\n  return (\n    <AuthContainer>\n      <div>\n        <ACLogoIcon />\n      </div>\n      <h1>建立您的帳號</h1>\n\n      <AuthInputContainer>\n        <AuthInput\n          label=\"帳號\"\n          placeholder=\"請輸入帳號\"\n          value={username}\n          onChange={(nameInputValue) => setUserName(nameInputValue)}\n        />\n      </AuthInputContainer>\n\n      <AuthInputContainer>\n        <AuthInput\n          label=\"Email\"\n          placeholder=\"請輸入 email\"\n          value={email}\n          onChange={(emailInputValue) => setEmail(emailInputValue)}\n        />\n      </AuthInputContainer>\n\n      <AuthInputContainer>\n        <AuthInput\n          type=\"password\"\n          label=\"密碼\"\n          placeholder=\"請輸入密碼\"\n          value={password}\n          onChange={(passwordInputValue) => setPassword(passwordInputValue)}\n        />\n      </AuthInputContainer>\n      <AuthButton onClick={handleClick}>註冊</AuthButton>\n      <Link to=\"/login\">\n        <AuthLinkText>取消</AuthLinkText>\n      </Link>\n    </AuthContainer>\n  );\n};\n\nexport default SignUpPage;\n","import './App.scss';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { TodoPage, LoginPage, SignUpPage, HomePage } from './pages';\nimport { AuthProvider } from 'context/AuthContext';\n/*\n這裡的 AuthProvider 是一個封裝好的 component，其內包含了 Context ，而他其下的元件都能使用它所提供的 value (裡面的props)，但我們還要去執行 useContext才能使用(會import進來useAuth)\n*/\n\nconst basename = process.env.PUBLIC_URL;\n//之前設定的.env環境檔內的變數去執行，意思是我們會在這個根路由底下去執行其他路由流程，導向HomePage\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BrowserRouter basename={basename}>\n        <AuthProvider>\n          <Routes>\n            <Route path=\"login\" element={<LoginPage />} />\n            <Route path=\"signup\" element={<SignUpPage />} />\n            <Route path=\"todo\" element={<TodoPage />} />\n            <Route path=\"*\" element={<HomePage />} />\n          </Routes>\n        </AuthProvider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n/* 路由元件屬性意義\nBrowserRouter => 讓其底下所有的component都能使用router\nRoutes => 用來定義哪個路徑配對哪個元件\npath => 屬性對應網址\nelement => 屬性對應元件名稱\npath=\"*\" 是首頁的意思\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}